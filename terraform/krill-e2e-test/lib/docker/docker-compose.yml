---
version: "3.6"

services:
  nginx:
    container_name: nginx
    build:
      context: nginx
      network: host
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
      - VALIDATION=http
      - URL=$KRILL_FQDN  # the FQDN of the DNS record of the host (used by Lets Encrypt)
      - STAGING=$KRILL_STAGING_CERT # true if the LetsEncrypt cert should be for testing
      - DHLEVEL=1024 # speed up deployment, perhaps use an alternate NGINX container to avoid this delay?
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - krill_letsencrypt_certs:/config/etc/letsencrypt
    restart: unless-stopped
    depends_on:
      - krill

  krill:
    image: nlnetlabs/krill:$KRILL_VERSION
    container_name: krill
    environment:
      # Comment out the next line if using your own krill.conf file.
      # Also see the comment in the 'volumes' section below.
      - KRILL_LOG_LEVEL=debug
      - KRILL_USE_TA
      - KRILL_AUTH_TOKEN
      - KRILL_FQDN
      - KRILL_REPO_ENABLED=true
    volumes:
      - krill_data:/var/kill/data
      - rsync_data:/var/krill/data/repo/rsync/
      - /tmp/ka:/tmp/ka
      # Uncomment the next line to use your own krill.conf file.
      # Remember to replace /local/path/to/your/ with the correct path.
      # - /local/path/to/your/krill.conf:/var/krill/data/krill.conf
    restart: unless-stopped

  rsyncd:
    build:
      context: rsyncd
      network: host
    container_name: rsyncd
    ports:
      - "873:873"
    volumes:
      - rsync_data:/share:ro
    restart: unless-stopped
  
  routinator:
    build:
      context: relyingparties/routinator
      network: host
    container_name: routinator
    dns: 8.8.8.8
    environment:
      - KRILL_FQDN
      - SRC_TAL
    ports:
      - "3323:3323"
      - "9556:9556"
    restart: on-failure
    depends_on:
      - relyingpartybase

  octorpki:
    build:
      context: relyingparties/octorpki
      network: host
    container_name: octorpki
    dns: 8.8.8.8
    environment:
      - KRILL_FQDN
      - SRC_TAL
    restart: on-failure
    depends_on:
      - relyingpartybase

  fortvalidator:
    build:
      context: relyingparties/fortvalidator
      network: host
    container_name: fortvalidator
    dns: 8.8.8.8
    environment:
      - KRILL_FQDN
      - SRC_TAL
    restart: on-failure
    depends_on:
      - relyingpartybase

  rpkivalidator3:
    build:
      context: relyingparties/rpkivalidator3
      network: host
    container_name: rpkivalidator3
    dns: 8.8.8.8
    environment:
      - KRILL_FQDN
      - SRC_TAL
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      - relyingpartybase
      - nginx

  rcynic:
    build:
      context: relyingparties/rcynic
      network: host
    container_name: rcynic
    dns: 8.8.8.8
    environment:
      - KRILL_FQDN
      - KRILL_USE_TA
      - SRC_TAL
    restart: on-failure
    depends_on:
      - relyingpartybase

  rpkiclient:
    build:
      context: relyingparties/rpki-client
      network: host
    container_name: rpkiclient
    dns: 8.8.8.8
    environment:
      - KRILL_FQDN
      - SRC_TAL
    restart: on-failure
    depends_on:
      - relyingpartybase

  relyingpartybase:
    image: relyingpartybase
    build:
      context: relyingparties/base
      network: host
    container_name: relyingpartybase

volumes:
  krill_data:

  # Volume for storing Lets Encrypt certificate details.
  # Before you can use this compose file for the first time you will need to
  # create this volume using the command:
  #
  #   docker volume create krill_letsencrypt_certs
  #
  # Why? If you destroy and recreate the nginx container the cert data is
  # preserved. Without this the certificate will be re-requested from Lets
  # Encrypt every time the container runs and you risk Lets Encrypt blocking
  # you for a _week_! The limits are low enough that if you are iterating on
  # the Docker setup and forget to use Lets Encrypt staging mode (which has
  # higher rate limits) you can easily hit the limits and get blocked. Thus
  # it's a good idea to use an externally managed volume to store this data.
  #
  # See: https://letsencrypt.org/docs/rate-limits/
  krill_letsencrypt_certs:
    external: true
  
  rsync_data:

  tals:
